@using GameCatalogue.Services.Data.Interfaces;
@using GameCatalogue.Web.Infrastructure;
@model GameDetailsViewModel

@inject IDeveloperService DeveloperService
@{
	
	ViewBag.Title = "Game Details";

	bool isUserDeveloper = await DeveloperService.DeveloperExistsByUserId(this.User.GetId());
	bool isDeveloperProducer = await DeveloperService.HasGameWithId(this.User.GetId(), Model.Id);
}


<h2 class="text-center">@ViewBag.Title</h2>
<hr />

<div class="container" style="display:inline">
	<div class="row">
		<div class="col-4">
			<img class="card-img-top" style="width: 20rem;"
				src="@Model.ImageURL" alt="Game Image">
		</div>
		<div class="card col-8 border-0">
				<p style="font-size:25px;"><u>@Model.Name</u></p>
				<p>@Model.Description</p>
				<p>Genre: <b>@Model.Genre</b></p>
				<div class="form-inline">
					@if (this.User.Identity?.IsAuthenticated ?? false)
					{
						@if ((isUserDeveloper && isDeveloperProducer) || this.User.IsAdmin())
						{
							<a class="btn btn-warning" asp-controller="Game" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
							<a class="ml-2 btn btn-danger" asp-controller="Game" asp-action="Delete" asp-route-id="@Model.Id">Delete</a>
						}
					}
				</div>
				<p></p>
			<div class="card" style="width: 18rem;">
				<div class="card-body">
					<h5 class="card-title">Developer information</h5>
					<p class="card-text">Display name: @Model.Developer.DisplayName</p>
					<p class="card-text">Email: @Model.Developer.BusinessEmail</p>
				</div>
			</div>		
		</div>
	</div>
</div>

